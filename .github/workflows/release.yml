name: 'C++ CI'
on:
  push:
    branches:
      - master
      - feature/github_actions
jobs:
  build:
    runs-on: ${{ matrix.os }} # Используем матрицу для разных ОС
    permissions: write-all
    strategy:
      matrix:
        os: [ubuntu-latest, macos-14] # Матрица для Linux и macOS
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - name: Install Dependencies
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get update && sudo apt-get install libboost-test-dev -y
      - name: Install Dependencies (macOS)
        if: matrix.os == 'macos-14'
        run: brew install boost
      - run: cmake . -DPATCH_VERSION=${{ github.run_number }}
      - run: cmake --build .
      - run: cmake --build . --target test
      - run: cmake --build . --target package
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.run_number }}
          release_name: Release ${{ github.run_number }}
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          # Условный путь к файлу
          asset_path: ${{ matrix.os == 'ubuntu-latest' && './helloworld-0.0.${{ github.run_number }}-Linux.deb' || './helloworld-0.0.${{ github.run_number }}-Darwin.zip' }}
          asset_name: ${{ matrix.os == 'ubuntu-latest' && 'helloworld-0.0.${{ github.run_number }}-Linux.deb' || 'helloworld-0.0.${{ github.run_number }}-Darwin.zip' }}
          asset_content_type: ${{ matrix.os == 'ubuntu-latest' && 'application/vnd.debian.binary-package' || 'application/zip' }}
